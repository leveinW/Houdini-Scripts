import hou
import voptoolutils

selected_nodes_list = hou.selectedNodes()



for index, item in enumerate(selected_nodes_list):  
     

    #get texture info
    
    albedo_texture = item.parm("basecolor_texture").eval()
    roughness_texture = item.parm("rough_texture").eval()
    normal_texture = item.parm("baseNormal_texture").eval()
    displacement_texture = item.parm("dispTex_texture").eval()
    metallnes_texture = item.parm("metallic_texture").eval()
    opacity_texture = item.parm("opaccolor_texture").eval()
 
    #create karmamaterial subnetwork   
    mat_libraryname = "Mat_" + item.name()
    mat_network = hou.node("/stage").createNode("materiallibrary", mat_libraryname)   
    
    
    ##adjust position & color    
    ##center
    networkEditor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    screenBounds = networkEditor.visibleBounds()
    screenCenter = screenBounds.center()
    screenCenter = screenBounds.center()    
    selected_position = screenCenter + hou.Vector2(index*3, 0)    
    mat_network.setPosition(selected_position)
    

    
    #create karmamaterial_subnet
    karmamaterial_name = "MTLX_" + item.name()
    mask = voptoolutils.KARMAMTLX_TAB_MASK
    voptoolutils._setupMtlXBuilderSubnet(destination_node=mat_network, name=karmamaterial_name, mask=mask, folder_label='Karma Material Builder')
    


    #mat path  
    path_inside_matnetwork = mat_network.path() + "/" + karmamaterial_name
   
    #standart_surface_node
    standard_surface_node_path = path_inside_matnetwork + "/" + "mtlxstandard_surface"
    standard_surface_node = hou.node(standard_surface_node_path)
  
    #create tileable uvs
    uv_texcoord = hou.node(path_inside_matnetwork).createNode("mtlxtexcoord")
    uv_mult = hou.node(path_inside_matnetwork).createNode("mtlxmultiply")
    

    #create Albedo  
    if albedo_texture != "":
        albedo_node = hou.node(path_inside_matnetwork).createNode("mtlximage", "ALBEDO")   
        standard_surface_node.setInput(1, albedo_node)
        albedo_node.parm("file").set(albedo_texture)
        albedo_node.setInput(3, uv_mult)
    
    
    #create Metalness  
    if metallnes_texture != "":
        metalness_node = hou.node(path_inside_matnetwork).createNode("mtlximage", "METALNESS")   
        standard_surface_node.setInput(3, metalness_node)
        metalness_node.parm("signature").set("Float")  
        metalness_node.parm("file").set(metallnes_texture)
        metalness_node.setInput(3, uv_mult)
    
    
    #create Roughness
    if roughness_texture != "":
        roughness_node = hou.node(path_inside_matnetwork).createNode("mtlximage", "ROUGHNESS")   
        standard_surface_node.setInput(6, roughness_node)
        roughness_node.parm("signature").set("Float")  
        roughness_node.parm("file").set(roughness_texture)
        roughness_node.setInput(3, uv_mult)
        
    
    #create Opacity
    if opacity_texture != "":    
        opacity_node = hou.node(path_inside_matnetwork).createNode("mtlximage", "OPACITY")   
        standard_surface_node.setInput(38, opacity_node)
        opacity_node.parm("signature").set("vector3")  
        opacity_node.parm("file").set(opacity_texture)
        opacity_node.setInput(3, uv_mult)
    
  
    #create Normal  
    if normal_texture != "":        
        normal_node = hou.node(path_inside_matnetwork).createNode("mtlximage", "NORMAL_MAP")
        normal_mtlx_node = hou.node(path_inside_matnetwork).createNode("mtlxnormalmap")
        normal_node.parm("signature").set("vector3")
        normal_node.parm("file").set(normal_texture)
        normal_node.setInput(3, uv_mult)   
    
        normal_mtlx_node.setInput(0, normal_node)
        standard_surface_node.setInput(40, normal_mtlx_node)

    #create displacement
    if displacement_texture != "":  
        displacement_node = hou.node(path_inside_matnetwork).createNode("mtlximage", "DISPLACEMENT")   
        
        mtlxdisplacement_node = hou.node(path_inside_matnetwork + "/" + "mtlxdisplacement")
        mtlxdisplacement_node.setInput(0, displacement_node)
        displacement_node.parm("signature").set("Float")  
        displacement_node.parm("file").set(displacement_texture)    
        mtlxdisplacement_node.parm("scale").set(item.parm("dispTex_scale").eval())
        displacement_node.setInput(3, uv_mult)
        
    uv_mult.setInput(0, uv_texcoord)
    
    
    hou.node(path_inside_matnetwork).layoutChildren() 
    
    